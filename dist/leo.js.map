{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/browser-cookies/src/browser-cookies.js","node_modules/nanoajax/index.js","node_modules/punycode/punycode.js","node_modules/querystring-es3/decode.js","node_modules/querystring-es3/encode.js","node_modules/querystring-es3/index.js","node_modules/url/url.js","node_modules/url/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","nanoajax","URL","cookies","Leo","options","_classCallCheck","this","defaultOptions","apiBase","Object","assign","url","parse","window","location","href","sessionId","get","query","type","ajax","host","res","console","log","defaults","set","name","value","opts","expires","domain","path","undefined","secure","httponly","expDate","Date","getTime","document","cookie","replace","encodeURIComponent","toUTCString","split","cookieLength","separatorIndex","indexOf","decodeURIComponent","substring","erase","getRequest","cors","global","XDomainRequest","test","navigator","userAgent","XMLHttpRequest","setDefault","obj","key","reqfields","params","callback","cb","statusCode","responseText","called","req","status","response","headers","body","method","open","success","onload","onreadystatechange","readyState","onerror","ontimeout","onabort","FormData","field","len","setRequestHeader","send","root","error","RangeError","errors","map","array","fn","result","mapDomain","string","parts","regexSeparators","labels","encoded","join","ucs2decode","extra","output","counter","charCodeAt","push","ucs2encode","stringFromCharCode","basicToDigit","codePoint","base","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","floor","damp","baseMinusTMin","tMax","skew","decode","input","out","basic","j","index","oldi","w","baseMinusT","inputLength","initialN","bias","initialBias","lastIndexOf","delimiter","maxInt","tMin","splice","encode","handledCPCount","basicLength","m","q","currentValue","handledCPCountPlusOne","qMinusT","toUnicode","regexPunycode","slice","toLowerCase","toASCII","regexNonASCII","freeExports","nodeType","freeModule","freeGlobal","self","punycode","overflow","not-basic","invalid-input","Math","String","fromCharCode","version","ucs2","define","amd","hasOwnProperty","prop","prototype","qs","sep","eq","regexp","maxKeys","kstr","vstr","v","x","idx","substr","isArray","Array","xs","toString","stringifyPrimitive","isFinite","objectKeys","ks","keys","stringify","Url","protocol","slashes","auth","port","hostname","hash","search","pathname","urlParse","parseQueryString","slashesDenoteHost","util","isObject","urlFormat","isString","format","urlResolve","source","relative","resolve","urlResolveObject","resolveObject","protocolPattern","portPattern","simplePathPattern","delims","unwise","concat","autoEscape","nonHostChars","hostEndingChars","hostnameMaxLen","hostnamePartPattern","hostnamePartStart","unsafeProtocol","javascript","javascript:","hostlessProtocol","slashedProtocol","http","https","ftp","gopher","file","http:","https:","ftp:","gopher:","file:","querystring","TypeError","queryIndex","splitter","uSplit","slashRegex","rest","trim","simplePath","exec","proto","lowerProto","match","hostEnd","hec","atSign","parseHost","ipv6Hostname","hostparts","part","newpart","validParts","notHost","bit","unshift","p","h","ae","esc","escape","qm","charAt","rel","tkeys","tk","tkey","rkeys","rk","rkey","relPath","shift","isSourceAbs","isRelAbs","mustEndAbs","removeAllDots","srcPath","psychotic","pop","isNullOrUndefined","authInHost","isNull","last","hasTrailingSlash","up","isAbsolute","arg"],"mappings":"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","file":"leo.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const nanoajax = require('nanoajax')\nconst URL = require('url')\nconst cookies = require('browser-cookies')\n\nclass Leo {\n  constructor (options) {\n    const defaultOptions = {\n      apiBase: 'https://link.getvase.com/leopixel'\n    }\n    this.options = Object.assign({}, defaultOptions, options)\n\n  }\n  init() {\n    const url = URL.parse(window.location.href, true)\n    const sessionId = cookies.get('vase-survey-session') || url.query.sessionId\n    this.options.sessionId = sessionId\n  }\n  logEvent (type) {\n    nanoajax.ajax({url: `${this.options.apiBase}/${type}?sessionId=${this.options.sessionId}&src=${URL.parse(window.location.href).host}`}, (code, res) => {\n      if (code !== 200) {\n        console.log(res)\n      }\n    })\n  }\n\n}\n\n\nif (!window.Leo) {\n  window.Leo = new Leo()\n}\n","exports.defaults = {};\n\nexports.set = function(name, value, options) {\n  // Retrieve options and defaults\n  var opts = options || {};\n  var defaults = exports.defaults;\n\n  // Apply default value for unspecified options\n  var expires  = opts.expires || defaults.expires;\n  var domain   = opts.domain  || defaults.domain;\n  var path     = opts.path     != undefined ? opts.path     : (defaults.path != undefined ? defaults.path : '/');\n  var secure   = opts.secure   != undefined ? opts.secure   : defaults.secure;\n  var httponly = opts.httponly != undefined ? opts.httponly : defaults.httponly;\n\n  // Determine cookie expiration date\n  // If succesful the result will be a valid Date, otherwise it will be an invalid Date or false(ish)\n  var expDate = expires ? new Date(\n      // in case expires is an integer, it should specify the number of days till the cookie expires\n      typeof expires == 'number' ? new Date().getTime() + (expires * 864e5) :\n      // else expires should be either a Date object or in a format recognized by Date.parse()\n      expires\n  ) : '';\n\n  // Set cookie\n  document.cookie = name.replace(/[^+#$&^`|]/g, encodeURIComponent)                // Encode cookie name\n  .replace('(', '%28')\n  .replace(')', '%29') +\n  '=' + value.replace(/[^+#$&/:<-\\[\\]-}]/g, encodeURIComponent) +                  // Encode cookie value (RFC6265)\n  (expDate && expDate.getTime() >= 0 ? ';expires=' + expDate.toUTCString() : '') + // Add expiration date\n  (domain   ? ';domain=' + domain : '') +                                          // Add domain\n  (path     ? ';path='   + path   : '') +                                          // Add path\n  (secure   ? ';secure'           : '') +                                          // Add secure option\n  (httponly ? ';httponly'         : '');                                           // Add httponly option\n};\n\nexports.get = function(name) {\n  var cookies = document.cookie.split(';');\n\n  // Iterate all cookies\n  for(var i = 0; i < cookies.length; i++) {\n    var cookie = cookies[i];\n    var cookieLength = cookie.length;\n\n    // Determine separator index (\"name=value\")\n    var separatorIndex = cookie.indexOf('=');\n\n    // IE<11 emits the equal sign when the cookie value is empty\n    separatorIndex = separatorIndex < 0 ? cookieLength : separatorIndex;\n\n    // Decode the cookie name and remove any leading/trailing spaces, then compare to the requested cookie name\n    if (decodeURIComponent(cookie.substring(0, separatorIndex).replace(/^\\s+|\\s+$/g, '')) == name) {\n      return decodeURIComponent(cookie.substring(separatorIndex + 1, cookieLength));\n    }\n  }\n\n  return null;\n};\n\nexports.erase = function(name, options) {\n  exports.set(name, '', {\n    expires:  -1,\n    domain:   options && options.domain,\n    path:     options && options.path,\n    secure:   0,\n    httponly: 0}\n  );\n};\n","// Best place to find information on XHR features is:\n// https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\nvar reqfields = [\n  'responseType', 'withCredentials', 'timeout', 'onprogress'\n]\n\n// Simple and small ajax function\n// Takes a parameters object and a callback function\n// Parameters:\n//  - url: string, required\n//  - headers: object of `{header_name: header_value, ...}`\n//  - body:\n//      + string (sets content type to 'application/x-www-form-urlencoded' if not set in headers)\n//      + FormData (doesn't set content type so that browser will set as appropriate)\n//  - method: 'GET', 'POST', etc. Defaults to 'GET' or 'POST' based on body\n//  - cors: If your using cross-origin, you will need this true for IE8-9\n//\n// The following parameters are passed onto the xhr object.\n// IMPORTANT NOTE: The caller is responsible for compatibility checking.\n//  - responseType: string, various compatability, see xhr docs for enum options\n//  - withCredentials: boolean, IE10+, CORS only\n//  - timeout: long, ms timeout, IE8+\n//  - onprogress: callback, IE10+\n//\n// Callback function prototype:\n//  - statusCode from request\n//  - response\n//    + if responseType set and supported by browser, this is an object of some type (see docs)\n//    + otherwise if request completed, this is the string text of the response\n//    + if request is aborted, this is \"Abort\"\n//    + if request times out, this is \"Timeout\"\n//    + if request errors before completing (probably a CORS issue), this is \"Error\"\n//  - request object\n//\n// Returns the request object. So you can call .abort() or other methods\n//\n// DEPRECATIONS:\n//  - Passing a string instead of the params object has been removed!\n//\nexports.ajax = function (params, callback) {\n  // Any variable used more than once is var'd here because\n  // minification will munge the variables whereas it can't munge\n  // the object access.\n  var headers = params.headers || {}\n    , body = params.body\n    , method = params.method || (body ? 'POST' : 'GET')\n    , called = false\n\n  var req = getRequest(params.cors)\n\n  function cb(statusCode, responseText) {\n    return function () {\n      if (!called) {\n        callback(req.status === undefined ? statusCode : req.status,\n                 req.status === 0 ? \"Error\" : (req.response || req.responseText || responseText),\n                 req)\n        called = true\n      }\n    }\n  }\n\n  req.open(method, params.url, true)\n\n  var success = req.onload = cb(200)\n  req.onreadystatechange = function () {\n    if (req.readyState === 4) success()\n  }\n  req.onerror = cb(null, 'Error')\n  req.ontimeout = cb(null, 'Timeout')\n  req.onabort = cb(null, 'Abort')\n\n  if (body) {\n    setDefault(headers, 'X-Requested-With', 'XMLHttpRequest')\n\n    if (!global.FormData || !(body instanceof global.FormData)) {\n      setDefault(headers, 'Content-Type', 'application/x-www-form-urlencoded')\n    }\n  }\n\n  for (var i = 0, len = reqfields.length, field; i < len; i++) {\n    field = reqfields[i]\n    if (params[field] !== undefined)\n      req[field] = params[field]\n  }\n\n  for (var field in headers)\n    req.setRequestHeader(field, headers[field])\n\n  req.send(body)\n\n  return req\n}\n\nfunction getRequest(cors) {\n  // XDomainRequest is only way to do CORS in IE 8 and 9\n  // But XDomainRequest isn't standards-compatible\n  // Notably, it doesn't allow cookies to be sent or set by servers\n  // IE 10+ is standards-compatible in its XMLHttpRequest\n  // but IE 10 can still have an XDomainRequest object, so we don't want to use it\n  if (cors && global.XDomainRequest && !/MSIE 1/.test(navigator.userAgent))\n    return new XDomainRequest\n  if (global.XMLHttpRequest)\n    return new XMLHttpRequest\n}\n\nfunction setDefault(obj, key, value) {\n  obj[key] = obj[key] || value\n}\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n","'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n","'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n"]}